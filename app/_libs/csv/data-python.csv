contentId,language,framework,title,description,templateCode,answer01_code,answer01_hint,answer01_desc,answer02_code,answer02_hint,answer02_desc,answer03_code,answer03_hint,answer03_desc
,Python,なし,文字列を逆にせよ,与えられた文字列を逆順にして返す関数 `reverse_string` を作成してください。,def reverse_string(s):\n    # ここに書くコードを考えてください\n,result = ''\nfor char in reversed(s):\n    result += char\nreturn result,末尾から1文字ずつ結合,文字列の最後の文字から順番に、新しい文字列に1文字ずつ追加していく方法です。例えば「こんにちは」という文字列なら、「は」「ち」「に」「ん」「こ」の順に結合していきます。,return s[::-1],スライスで一括変換,スライスを使って文字列を逆順にする方法です。短いコードで書けますが、文字列を一度に変換する必要があります。,return ''.join(reversed(s)),reversedで文字列変換,reversed()関数で文字列を逆順にし、join()メソッドで文字列に戻す方法です。
,Python,なし,配列の合計を求めよ,整数のリストを受け取り、その合計を返す関数 `sum_array` を作成してください。,def sum_array(arr):\n    # ここに書くコードを考えてください\n,total = 0\nfor num in arr:\n    total += num\nreturn total,for文で順次加算,"リストの数字を1つずつ順番に足し合わせていく方法です。例えば[1, 2, 3]というリストなら、0から始めて1を足し、2を足し、3を足して、最終的に6になります。",return sum(arr),sum関数で一括計算,sum()関数を使ってリストの数字をまとめて足し合わせる方法です。最も簡単で効率的な方法です。,"return reduce(lambda x, y: x + y, arr, 0)",reduceで集計,reduce()関数を使ってリストの数字をまとめて足し合わせる方法です。最初に0を設定し、そこにリストの数字を1つずつ足していきます。
,Python,なし,偶数のみ抽出,整数リストから偶数だけを抽出して返す関数 `filter_even` を作成してください。,def filter_even(arr):\n    # ここに書くコードを考えてください\n,result = []\nfor num in arr:\n    if num % 2 == 0:\n        result.append(num)\nreturn result,for文で条件分岐,"リストの数字を1つずつ確認し、2で割り切れる数（偶数）だけを新しいリストに追加していく方法です。例えば[1, 2, 3, 4]というリストなら、[2, 4]というリストができます。",return [num for num in arr if num % 2 == 0],リスト内包表記で条件抽出,リスト内包表記を使ってリストから条件に合う数字だけを選び出す方法です。2で割り切れる数だけを選び出して新しいリストを作ります。,"return list(filter(lambda x: x % 2 == 0, arr))",filterで条件抽出,filter()関数を使ってリストから条件に合う数字だけを選び出す方法です。2で割り切れる数だけを選び出して新しいリストを作ります。
,Python,なし,最大値を見つけよ,整数のリストから最大値を返す関数 `get_max` を作成してください。,def get_max(arr):\n    # ここに書くコードを考えてください\n,max_val = arr[0]\nfor num in arr[1:]:\n    if num > max_val:\n        max_val = num\nreturn max_val,for文で最大値更新,リストの最初の数字を最大値として覚えておき、それ以降の数字と1つずつ比較していく方法です。より大きい数字が見つかったら、それを新しい最大値として覚えます。,return max(arr),max関数で一括取得,max()関数を使ってリストの中から一番大きい数字を直接見つける方法です。最も簡単で効率的な方法です。,,,
,Python,なし,リストをソートせよ,整数リストを小さい順に並び替える関数 `sort_list` を作成してください。隣り合う2つの数を比較して、大きい方を右に移動させる方法を使ってください。,def sort_list(arr):\n    # ここに書くコードを考えてください\n,"result = arr.copy()\nfor i in range(len(result) - 1):\n    for j in range(len(result) - i - 1):\n        if result[j] > result[j + 1]:\n            result[j], result[j + 1] = result[j + 1], result[j]\nreturn result",隣り合う数を比較して交換,"隣り合う2つの数字を比較して、左の数字が右の数字より大きい場合は入れ替える方法です。これを繰り返すことで、最終的に小さい順に並びます。例えば[3, 1, 4, 2]というリストなら、[1, 2, 3, 4]になります。",return sorted(arr),sorted関数使用,sorted()関数を使ってリストを並び替える方法です。数字を小さい順に並べるための簡単な方法で、元のリストは変更されません。,,,
,Python,なし,本棚から本を探す,本棚に本が背表紙の高さ順に並んでいます。特定の高さの本を探す関数 `find_book` を作成してください。,"def find_book(books, target_height):\n    # ここに書くコードを考えてください\n","left, right = 0, len(books) - 1\nwhile left <= right:\n    mid = (left + right) // 2\n    if books[mid] == target_height:\n        return mid\n    elif books[mid] < target_height:\n        left = mid + 1\n    else:\n        right = mid - 1\nreturn -1",本棚を半分ずつ探す,本棚を半分に分けて探していく方法です。例えば10冊の本がある場合、まず5冊目の本を確認し、探している本より背表紙が低ければ後半を、高ければ前半を探します。これを繰り返して目的の本を見つけます。,try:\n    return books.index(target_height)\nexcept ValueError:\n    return -1,index関数で順番に探す,index()メソッドを使って本棚の本を1冊ずつ順番に確認していく方法です。探している本の高さと一致する本を見つけたら、その位置を返します。見つからない場合は-1を返します。,,,
,Python,なし,階段の上り方,n段の階段があります。1段ずつ、または2段ずつ上ることができます。n段目までの上り方の総数を求める関数 `count_ways` を作成してください。,def count_ways(n):\n    # ここに書くコードを考えてください\n,"if n <= 1:\n    return 1\na, b = 1, 1\nfor i in range(2, n + 1):\n    a, b = b, a + b\nreturn b",順番に計算,1段目と2段目の上り方の数を覚えておき、それ以降は前の2つの数を足し合わせていく方法です。例えば3段目なら、1段目と2段目の上り方の数を足した数になります。,if n <= 1:\n    return 1\nreturn count_ways(n - 1) + count_ways(n - 2),再帰で計算,階段の上り方を、1段前と2段前の上り方の数の合計として計算する方法です。シンプルですが、同じ計算を何度も繰り返すため、段数が多くなると時間がかかります。,memo = {}\ndef ways(n):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return 1\n    memo[n] = ways(n - 1) + ways(n - 2)\n    return memo[n]\nreturn ways(n),計算結果を覚えておく,一度計算した結果を覚えておき、同じ計算を繰り返さないようにする方法です。例えば3段目の上り方を計算したら、その結果を覚えておき、後で同じ計算が必要になったときに再利用します。
,Python,なし,文字列の前後一致判定,与えられた文字列が前から読んでも後ろから読んでも同じになるかどうかを判定する関数 `is_palindrome` を作成してください。,def is_palindrome(s):\n    # ここに書くコードを考えてください\n,"left, right = 0, len(s) - 1\nwhile left < right:\n    if s[left] != s[right]:\n        return False\n    left += 1\n    right -= 1\nreturn True",両端から1文字ずつ比較,文字列の最初と最後の文字から順番に比較していく方法です。例えば「しんぶんし」という文字列なら、「し」と「し」、「ん」と「ん」、「ぶ」と「ぶ」を比較します。,return s == s[::-1],文字列を反転して比較,スライスを使って文字列を逆順にしてから比較する方法です。例えば「しんぶんし」という文字列なら、逆順にしても「しんぶんし」になるので、回文だと分かります。,"import re\nclean_s = re.sub(r'[^a-zA-Z0-9]', '', s.lower())\nreturn clean_s == clean_s[::-1]",記号を除いて比較,"正規表現を使って記号を除き、小文字に変換してから回文かどうかを判定する方法です。例えば「A man, a plan, a canal: Panama」という文字列なら、記号を除いて「amanaplanacanalpanama」となり、回文だと分かります。"
,Python,なし,リストの重複を削除,リストから重複する要素を削除する関数 `remove_duplicates` を作成してください。,def remove_duplicates(arr):\n    # ここに書くコードを考えてください\n,result = []\nfor item in arr:\n    if item not in result:\n        result.append(item)\nreturn result,for文で重複チェック,"リストの要素を1つずつ確認し、新しいリストにまだ入っていない要素だけを追加していく方法です。例えば[1, 2, 2, 3, 3, 3]というリストなら、[1, 2, 3]というリストができます。",return list(dict.fromkeys(arr)),辞書で一括削除,辞書のキーを使って重複する要素を自動的に取り除く方法です。辞書のキーは一意なので、重複する要素は自動的に除外されます。,return list(set(arr)),setで一括削除,set()を使って重複する要素を自動的に取り除く方法です。短いコードで書けますが、要素の順序が変わる可能性があります。
,Python,なし,宝探し,n個の部屋が一列に並んでいます。各部屋には宝の有無が記録されています。宝が隠されている部屋を全て見つける関数 `find_treasures` を作成してください。,def find_treasures(rooms):\n    # ここに書くコードを考えてください\n,"result = []\nfor i, has_treasure in enumerate(rooms):\n    if has_treasure:\n        result.append(i)\nreturn result",順番に確認,"部屋を1つずつ順番に確認し、宝がある部屋（Trueの値）の番号を新しいリストに追加していく方法です。例えば[False, True, False, True]というリストなら、[1, 3]というリストができます。","return [i for i, has_treasure in enumerate(rooms) if has_treasure]",リスト内包表記で一括処理,リスト内包表記を使って部屋の情報を一度に処理する方法です。宝がある部屋の番号だけを新しいリストに含めます。,,,
