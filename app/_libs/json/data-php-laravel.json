[
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "Eloquentモデルの作成",
        "description": "Userモデルを作成し、name、email、passwordフィールドを持つテーブルに対応するEloquentモデルを定義してください。",
        "templateCode": "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    // ここにコードを書いてください\n}",
        "answer01_code": "protected $fillable = [\n    'name',\n    'email',\n    'password'\n];\n\nprotected $hidden = [\n    'password'\n];",
        "answer01_hint": "fillableとhiddenプロパティを設定",
        "answer01_desc": "fillableプロパティで一括代入可能なフィールドを指定し、hiddenプロパティでJSONシリアライズ時に除外するフィールドを指定する方法です。",
        "answer02_code": "protected $guarded = ['id'];\n\nprotected $casts = [\n    'email_verified_at' => 'datetime'\n];",
        "answer02_hint": "guardedとcastsプロパティを使用",
        "answer02_desc": "guardedプロパティで保護するフィールドを指定し、castsプロパティでデータ型の自動変換を設定する方法です。",
        "answer03_code": "protected $table = 'users';\n\nprotected $primaryKey = 'id';\n\npublic $timestamps = true;",
        "answer03_hint": "テーブル名とプライマリキーを明示的に設定",
        "answer03_desc": "テーブル名やプライマリキーを明示的に指定し、タイムスタンプの使用を明示する方法です。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "マイグレーションファイルの作成",
        "description": "postsテーブルを作成するマイグレーションファイルを作成してください。title、content、user_idフィールドを含めてください。",
        "templateCode": "<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreatePostsTable extends Migration\n{\n    public function up()\n    {\n        // ここにコードを書いてください\n    }\n\n    public function down()\n    {\n        // ここにコードを書いてください\n    }\n}",
        "answer01_code": "Schema::create('posts', function (Blueprint $table) {\n    $table->id();\n    $table->string('title');\n    $table->text('content');\n    $table->foreignId('user_id')->constrained();\n    $table->timestamps();\n});",
        "answer01_hint": "Schema::createでテーブル作成",
        "answer01_desc": "Schema::createメソッドでテーブルを作成し、各フィールドの型を指定する方法です。外部キー制約も設定できます。",
        "answer02_code": "Schema::create('posts', function (Blueprint $table) {\n    $table->id();\n    $table->string('title', 255);\n    $table->longText('content');\n    $table->unsignedBigInteger('user_id');\n    $table->foreign('user_id')->references('id')->on('users');\n    $table->timestamps();\n});",
        "answer02_hint": "詳細なフィールド設定",
        "answer02_desc": "フィールドの詳細な設定を行い、外部キー制約を明示的に定義する方法です。",
        "answer03_code": "Schema::create('posts', function (Blueprint $table) {\n    $table->id();\n    $table->string('title')->index();\n    $table->text('content');\n    $table->foreignId('user_id')->constrained()->onDelete('cascade');\n    $table->timestamps();\n});",
        "answer03_hint": "インデックスとカスケード削除を設定",
        "answer03_desc": "インデックスを追加し、カスケード削除を設定する方法です。パフォーマンスとデータ整合性を向上させます。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "コントローラーの作成",
        "description": "PostControllerを作成し、index、show、store、update、destroyメソッドを実装してください。",
        "templateCode": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\n\nclass PostController extends Controller\n{\n    // ここにメソッドを実装してください\n}",
        "answer01_code": "public function index()\n{\n    $posts = Post::all();\n    return view('posts.index', compact('posts'));\n}\n\npublic function show(Post $post)\n{\n    return view('posts.show', compact('post'));\n}\n\npublic function store(Request $request)\n{\n    $post = Post::create($request->validated());\n    return redirect()->route('posts.show', $post);\n}\n\npublic function update(Request $request, Post $post)\n{\n    $post->update($request->validated());\n    return redirect()->route('posts.show', $post);\n}\n\npublic function destroy(Post $post)\n{\n    $post->delete();\n    return redirect()->route('posts.index');\n}",
        "answer01_hint": "基本的なCRUD操作を実装",
        "answer01_desc": "Eloquentモデルを使用して基本的なCRUD操作を実装する方法です。ルートモデルバインディングも活用しています。",
        "answer02_code": "public function index()\n{\n    $posts = Post::with('user')->paginate(10);\n    return response()->json($posts);\n}\n\npublic function show(Post $post)\n{\n    return response()->json($post->load('user'));\n}\n\npublic function store(PostRequest $request)\n{\n    $post = auth()->user()->posts()->create($request->validated());\n    return response()->json($post, 201);\n}\n\npublic function update(PostRequest $request, Post $post)\n{\n    $post->update($request->validated());\n    return response()->json($post);\n}\n\npublic function destroy(Post $post)\n{\n    $post->delete();\n    return response()->json(null, 204);\n}",
        "answer02_hint": "APIレスポンスとリレーション",
        "answer02_desc": "JSONレスポンスを返し、リレーションを活用する方法です。FormRequestクラスでバリデーションも行います。",
        "answer03_code": "public function index()\n{\n    $posts = Post::query()\n        ->when(request('search'), function($query, $search) {\n            return $query->where('title', 'like', \"%{$search}%\");\n        })\n        ->orderBy('created_at', 'desc')\n        ->paginate(15);\n    \n    return view('posts.index', compact('posts'));\n}",
        "answer03_hint": "クエリビルダーで検索機能を実装",
        "answer03_desc": "クエリビルダーを使用して検索機能やソート機能を実装する方法です。whenメソッドで条件付きクエリを構築します。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "ルートの定義",
        "description": "postsリソースのRESTfulルートを定義し、認証が必要なルートを設定してください。",
        "templateCode": "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\n\n// ここにルートを定義してください",
        "answer01_code": "Route::middleware('auth')->group(function () {\n    Route::resource('posts', PostController::class);\n});",
        "answer01_hint": "認証ミドルウェアでグループ化",
        "answer01_desc": "authミドルウェアを使用して認証が必要なルートをグループ化する方法です。resourceメソッドでRESTfulルートを一括定義します。",
        "answer02_code": "Route::get('/posts', [PostController::class, 'index'])->name('posts.index');\nRoute::get('/posts/{post}', [PostController::class, 'show'])->name('posts.show');\n\nRoute::middleware('auth')->group(function () {\n    Route::post('/posts', [PostController::class, 'store'])->name('posts.store');\n    Route::put('/posts/{post}', [PostController::class, 'update'])->name('posts.update');\n    Route::delete('/posts/{post}', [PostController::class, 'destroy'])->name('posts.destroy');\n});",
        "answer02_hint": "個別にルートを定義",
        "answer02_desc": "各ルートを個別に定義し、認証が必要なルートのみをミドルウェアで保護する方法です。",
        "answer03_code": "Route::apiResource('posts', PostController::class)->middleware('auth:sanctum');",
        "answer03_hint": "APIリソースルートを使用",
        "answer03_desc": "apiResourceメソッドを使用してAPI用のRESTfulルートを定義し、Sanctum認証を適用する方法です。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "バリデーションの実装",
        "description": "PostRequestクラスを作成し、title、content、user_idフィールドのバリデーションルールを定義してください。",
        "templateCode": "<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass PostRequest extends FormRequest\n{\n    public function authorize()\n    {\n        // ここにコードを書いてください\n    }\n\n    public function rules()\n    {\n        // ここにコードを書いてください\n    }\n}",
        "answer01_code": "public function authorize()\n{\n    return true;\n}\n\npublic function rules()\n{\n    return [\n        'title' => 'required|string|max:255',\n        'content' => 'required|string',\n        'user_id' => 'required|exists:users,id'\n    ];\n}",
        "answer01_hint": "基本的なバリデーションルール",
        "answer01_desc": "基本的なバリデーションルールを定義する方法です。required、string、max、existsルールを使用しています。",
        "answer02_code": "public function authorize()\n{\n    return auth()->check();\n}\n\npublic function rules()\n{\n    return [\n        'title' => 'required|string|max:255|unique:posts,title,' . $this->post?->id,\n        'content' => 'required|string|min:10',\n        'user_id' => 'required|exists:users,id'\n    ];\n}\n\npublic function messages()\n{\n    return [\n        'title.required' => 'タイトルは必須です',\n        'content.min' => '内容は最低10文字必要です'\n    ];\n}",
        "answer02_hint": "カスタムメッセージと条件付きルール",
        "answer02_desc": "カスタムエラーメッセージを定義し、更新時のuniqueルールを条件付きで設定する方法です。",
        "answer03_code": "public function authorize()\n{\n    if ($this->route('post')) {\n        return $this->route('post')->user_id === auth()->id();\n    }\n    return true;\n}\n\npublic function rules()\n{\n    $rules = [\n        'title' => 'required|string|max:255',\n        'content' => 'required|string|min:10'\n    ];\n    \n    if ($this->isMethod('POST')) {\n        $rules['user_id'] = 'required|exists:users,id';\n    }\n    \n    return $rules;\n}",
        "answer03_hint": "認証とHTTPメソッドによる条件分岐",
        "answer03_desc": "認証ロジックを実装し、HTTPメソッドに応じてバリデーションルールを変更する方法です。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "Eloquentリレーションの定義",
        "description": "UserモデルとPostモデルにリレーションを定義してください。Userは複数のPostを持ち、Postは1つのUserに属します。",
        "templateCode": "<?php\n\n// Userモデル\nclass User extends Authenticatable\n{\n    // ここにリレーションを定義してください\n}\n\n// Postモデル\nclass Post extends Model\n{\n    // ここにリレーションを定義してください\n}",
        "answer01_code": "// Userモデル\npublic function posts()\n{\n    return $this->hasMany(Post::class);\n}\n\n// Postモデル\npublic function user()\n{\n    return $this->belongsTo(User::class);\n}",
        "answer01_hint": "hasManyとbelongsToリレーション",
        "answer01_desc": "hasManyとbelongsToリレーションを使用して1対多の関係を定義する方法です。",
        "answer02_code": "// Userモデル\npublic function posts()\n{\n    return $this->hasMany(Post::class)->orderBy('created_at', 'desc');\n}\n\npublic function publishedPosts()\n{\n    return $this->hasMany(Post::class)->where('status', 'published');\n}\n\n// Postモデル\npublic function user()\n{\n    return $this->belongsTo(User::class)->withDefault([\n        'name' => 'Unknown User'\n    ]);\n}",
        "answer02_hint": "条件付きリレーションとデフォルト値",
        "answer02_desc": "リレーションに条件を追加し、デフォルト値を設定する方法です。",
        "answer03_code": "// Userモデル\npublic function posts()\n{\n    return $this->hasMany(Post::class);\n}\n\npublic function latestPost()\n{\n    return $this->hasOne(Post::class)->latestOfMany();\n}\n\n// Postモデル\npublic function user()\n{\n    return $this->belongsTo(User::class);\n}\n\npublic function scopePublished($query)\n{\n    return $query->where('status', 'published');\n}",
        "answer03_hint": "hasOneリレーションとスコープ",
        "answer03_desc": "hasOneリレーションで最新の投稿を取得し、スコープでクエリをカスタマイズする方法です。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "ミドルウェアの作成",
        "description": "管理者のみがアクセスできるAdminMiddlewareを作成してください。",
        "templateCode": "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass AdminMiddleware\n{\n    public function handle(Request $request, Closure $next)\n    {\n        // ここにコードを書いてください\n    }\n}",
        "answer01_code": "if (!auth()->check() || !auth()->user()->is_admin) {\n    abort(403, '管理者権限が必要です');\n}\n\nreturn $next($request);",
        "answer01_hint": "認証チェックと権限確認",
        "answer01_desc": "ユーザーが認証されているかチェックし、管理者権限があるかを確認する方法です。",
        "answer02_code": "if (!auth()->check()) {\n    return redirect()->route('login');\n}\n\nif (!auth()->user()->hasRole('admin')) {\n    abort(403, '管理者権限が必要です');\n}\n\nreturn $next($request);",
        "answer02_hint": "ロールベースの権限チェック",
        "answer02_desc": "ログインしていない場合はログインページにリダイレクトし、ロールベースで権限をチェックする方法です。",
        "answer03_code": "$user = auth()->user();\n\nif (!$user || !$user->hasPermission('admin.access')) {\n    if ($request->expectsJson()) {\n        return response()->json(['message' => '権限がありません'], 403);\n    }\n    \n    return redirect()->route('home')->with('error', '権限がありません');\n}\n\nreturn $next($request);",
        "answer03_hint": "JSONレスポンスとフラッシュメッセージ",
        "answer03_desc": "APIリクエストとWebリクエストを区別し、適切なレスポンスを返す方法です。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "ジョブクラスの作成",
        "description": "メール送信を行うSendWelcomeEmailジョブクラスを作成してください。",
        "templateCode": "<?php\n\nnamespace App\\Jobs;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse Illuminate\\Foundation\\Bus\\Dispatchable;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass SendWelcomeEmail implements ShouldQueue\n{\n    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;\n\n    public function __construct()\n    {\n        // ここにコードを書いてください\n    }\n\n    public function handle()\n    {\n        // ここにコードを書いてください\n    }\n}",
        "answer01_code": "private $user;\n\npublic function __construct($user)\n{\n    $this->user = $user;\n}\n\npublic function handle()\n{\n    Mail::to($this->user->email)->send(new WelcomeMail($this->user));\n}",
        "answer01_hint": "ユーザー情報を受け取りメール送信",
        "answer01_desc": "コンストラクタでユーザー情報を受け取り、handleメソッドでメールを送信する方法です。",
        "answer02_code": "private $user;\nprivate $delay;\n\npublic function __construct($user, $delay = 0)\n{\n    $this->user = $user;\n    $this->delay = $delay;\n}\n\npublic function handle()\n{\n    if ($this->delay > 0) {\n        sleep($this->delay);\n    }\n    \n    Mail::to($this->user->email)->send(new WelcomeMail($this->user));\n}\n\npublic function failed($exception)\n{\n    Log::error('Welcome email failed for user: ' . $this->user->id, [\n        'exception' => $exception->getMessage()\n    ]);\n}",
        "answer02_hint": "遅延処理とエラーハンドリング",
        "answer02_desc": "遅延処理を追加し、ジョブが失敗した場合のエラーハンドリングを実装する方法です。",
        "answer03_code": "private $user;\n\npublic function __construct($user)\n{\n    $this->user = $user;\n    $this->onQueue('emails');\n    $this->delay(now()->addMinutes(5));\n}\n\npublic function handle()\n{\n    try {\n        Mail::to($this->user->email)->send(new WelcomeMail($this->user));\n        \n        $this->user->update(['welcome_email_sent_at' => now()]);\n    } catch (Exception $e) {\n        $this->fail($e);\n    }\n}",
        "answer03_hint": "キューの指定とリトライ設定",
        "answer03_desc": "特定のキューを指定し、遅延実行を設定する方法です。成功時にデータベースを更新し、例外処理も含めています。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "サービスプロバイダーの作成",
        "description": "アプリケーションの設定を登録するAppServiceProviderを作成してください。",
        "templateCode": "<?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        // ここにコードを書いてください\n    }\n\n    public function boot()\n    {\n        // ここにコードを書いてください\n    }\n}",
        "answer01_code": "public function register()\n{\n    $this->app->singleton('example', function ($app) {\n        return new ExampleService();\n    });\n}\n\npublic function boot()\n{\n    // アプリケーションの起動時の処理\n}",
        "answer01_hint": "シングルトンの登録",
        "answer01_desc": "registerメソッドでシングルトンを登録し、bootメソッドでアプリケーション起動時の処理を定義する方法です。",
        "answer02_code": "public function register()\n{\n    $this->app->bind('payment.gateway', function ($app) {\n        return new StripeGateway(config('services.stripe.secret'));\n    });\n}\n\npublic function boot()\n{\n    Schema::defaultStringLength(191);\n    \n    Blade::directive('datetime', function ($expression) {\n        return \"<?php echo ($expression)->format('Y-m-d H:i:s'); ?>\";\n    });\n}",
        "answer02_hint": "バインディングとBladeディレクティブ",
        "answer02_desc": "インターフェースのバインディングを登録し、Bladeディレクティブを定義する方法です。",
        "answer03_code": "public function register()\n{\n    $this->app->when(OrderController::class)\n        ->needs(OrderRepository::class)\n        ->give(DatabaseOrderRepository::class);\n}\n\npublic function boot()\n{\n    Validator::extend('phone', function ($attribute, $value, $parameters, $validator) {\n        return preg_match('/^[0-9-+() ]+$/', $value);\n    }, '電話番号の形式が正しくありません');\n    \n    Paginator::useBootstrap();\n}",
        "answer03_hint": "依存性注入とカスタムバリデーション",
        "answer03_desc": "依存性注入の設定を行い、カスタムバリデーションルールを定義する方法です。"
    },
    {
        "contentId": "",
        "language": "PHP",
        "framework": "Laravel",
        "title": "Artisanコマンドの作成",
        "description": "データベースのバックアップを行うBackupDatabaseコマンドを作成してください。",
        "templateCode": "<?php\n\nnamespace App\\Console\\Commands;\n\nuse Illuminate\\Console\\Command;\n\nclass BackupDatabase extends Command\n{\n    protected $signature = 'backup:database';\n    protected $description = 'データベースのバックアップを作成します';\n\n    public function handle()\n    {\n        // ここにコードを書いてください\n    }\n}",
        "answer01_code": "public function handle()\n{\n    $filename = 'backup_' . date('Y-m-d_H-i-s') . '.sql';\n    $path = storage_path('backups/' . $filename);\n    \n    $command = sprintf(\n        'mysqldump -u%s -p%s %s > %s',\n        config('database.connections.mysql.username'),\n        config('database.connections.mysql.password'),\n        config('database.connections.mysql.database'),\n        $path\n    );\n    \n    exec($command);\n    \n    $this->info('バックアップが完了しました: ' . $filename);\n}",
        "answer01_hint": "mysqldumpコマンドを使用",
        "answer01_desc": "mysqldumpコマンドを使用してデータベースのバックアップを作成する方法です。",
        "answer02_code": "public function handle()\n{\n    $this->info('バックアップを開始します...');\n    \n    try {\n        $filename = 'backup_' . now()->format('Y-m-d_H-i-s') . '.sql';\n        $path = storage_path('backups/' . $filename);\n        \n        if (!file_exists(dirname($path))) {\n            mkdir(dirname($path), 0755, true);\n        }\n        \n        $command = sprintf(\n            'mysqldump -u%s -p%s %s > %s',\n            config('database.connections.mysql.username'),\n            config('database.connections.mysql.password'),\n            config('database.connections.mysql.database'),\n            $path\n        );\n        \n        $result = exec($command, $output, $returnCode);\n        \n        if ($returnCode === 0) {\n            $this->info('バックアップが完了しました: ' . $filename);\n        } else {\n            $this->error('バックアップに失敗しました');\n        }\n    } catch (Exception $e) {\n        $this->error('エラーが発生しました: ' . $e->getMessage());\n    }\n}",
        "answer02_hint": "エラーハンドリングとディレクトリ作成",
        "answer02_desc": "エラーハンドリングを追加し、ディレクトリが存在しない場合は作成する方法です。",
        "answer03_code": "public function handle()\n{\n    $this->info('バックアップを開始します...');\n    \n    $progressBar = $this->output->createProgressBar(100);\n    $progressBar->start();\n    \n    try {\n        $filename = 'backup_' . now()->format('Y-m-d_H-i-s') . '.sql';\n        $path = storage_path('backups/' . $filename);\n        \n        // 古いバックアップを削除（30日以上前）\n        $this->cleanOldBackups();\n        \n        $command = sprintf(\n            'mysqldump -u%s -p%s %s > %s',\n            config('database.connections.mysql.username'),\n            config('database.connections.mysql.password'),\n            config('database.connections.mysql.database'),\n            $path\n        );\n        \n        $result = exec($command, $output, $returnCode);\n        \n        $progressBar->finish();\n        \n        if ($returnCode === 0) {\n            $this->newLine();\n            $this->info('バックアップが完了しました: ' . $filename);\n            \n            // バックアップ情報をログに記録\n            Log::info('Database backup created', ['filename' => $filename]);\n        } else {\n            $this->newLine();\n            $this->error('バックアップに失敗しました');\n        }\n    } catch (Exception $e) {\n        $this->newLine();\n        $this->error('エラーが発生しました: ' . $e->getMessage());\n    }\n}\n\nprivate function cleanOldBackups()\n{\n    $backupDir = storage_path('backups');\n    $files = glob($backupDir . '/*.sql');\n    \n    foreach ($files as $file) {\n        if (filemtime($file) < now()->subDays(30)->timestamp) {\n            unlink($file);\n        }\n    }\n}",
        "answer03_hint": "プログレスバーと古いバックアップの削除",
        "answer03_desc": "プログレスバーを表示し、古いバックアップファイルを自動削除する機能を追加する方法です。"
    }
]