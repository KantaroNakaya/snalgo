contentId,language,title,description,templateCode,answer01_code,answer01_hint,answer01_desc,answer02_code,answer02_hint,answer02_desc,answer03_code,answer03_hint,answer03_desc
,PHP,文字列を逆にせよ,与えられた文字列を逆順にして返す関数 `reverseString` を作成してください。,<?php\nfunction reverseString($str) {\n  // ここに書くコードを考えてください\n},$result = '';\nfor ($i = strlen($str) - 1; $i >= 0; $i--) {\n  $result .= $str[$i];\n}\nreturn $result;,末尾から1文字ずつ結合,文字列の最後の文字から順番に、新しい文字列に1文字ずつ追加していく方法です。例えば「こんにちは」という文字列なら、「は」「ち」「に」「ん」「こ」の順に結合していきます。,return strrev($str);,strrev関数使用,PHPの組み込み関数strrev()を使って文字列を逆順にする方法です。最も簡単で効率的な方法です。,"return implode('', array_reverse(str_split($str)));",配列操作で一括変換,str_split()で文字列を配列に変換し、array_reverse()で配列を逆順にして、implode()で文字列に戻す方法です。
,PHP,配列の合計を求めよ,整数の配列を受け取り、その合計を返す関数 `sumArray` を作成してください。,<?php\nfunction sumArray($arr) {\n  // ここに書くコードを考えてください\n},$total = 0;\nforeach ($arr as $num) {\n  $total += $num;\n}\nreturn $total;,foreach文で順次加算,"配列の数字を1つずつ順番に足し合わせていく方法です。例えば[1, 2, 3]という配列なら、0から始めて1を足し、2を足し、3を足して、最終的に6になります。",return array_sum($arr);,array_sum関数使用,PHPの組み込み関数array_sum()を使って配列の合計を直接計算する方法です。最も簡単で効率的な方法です。,"return array_reduce($arr, function($carry, $item) {\n  return $carry + $item;\n}, 0);",array_reduceで集計,array_reduce()関数を使って配列の数字をまとめて足し合わせる方法です。最初に0を設定し、そこに配列の数字を1つずつ足していきます。
,PHP,偶数のみ抽出,整数配列から偶数だけを抽出して返す関数 `filterEven` を作成してください。,<?php\nfunction filterEven($arr) {\n  // ここに書くコードを考えてください\n},$result = [];\nforeach ($arr as $num) {\n  if ($num % 2 === 0) {\n    $result[] = $num;\n  }\n}\nreturn $result;,foreach文で条件分岐,"配列の数字を1つずつ確認し、2で割り切れる数（偶数）だけを新しい配列に追加していく方法です。例えば[1, 2, 3, 4]という配列なら、[2, 4]という配列ができます。","return array_filter($arr, function($num) {\n  return $num % 2 === 0;\n});",array_filterで条件抽出,array_filter()関数を使って配列から条件に合う数字だけを選び出す方法です。2で割り切れる数だけを選び出して新しい配列を作ります。,"return array_values(array_filter($arr, 'is_even'));",is_even関数使用,is_even()関数とarray_filter()を組み合わせて偶数を抽出する方法です。array_values()でインデックスを振り直します。
,PHP,文字数をカウントせよ,与えられた文字列の長さを返す関数 `getLength` を作成してください。,<?php\nfunction getLength($str) {\n  // ここに書くコードを考えてください\n},$count = 0;\nfor ($i = 0; $i < strlen($str); $i++) {\n  $count++;\n}\nreturn $count;,for文で1文字ずつカウント,文字列の文字を1つずつ数えていく方法です。例えば「こんにちは」という文字列なら、1文字目、2文字目...と数えていき、最終的に5という数字が得られます。,return strlen($str);,strlen関数使用,PHPの組み込み関数strlen()を使って文字列の長さを直接取得する方法です。最も簡単で効率的な方法です。,"return mb_strlen($str, 'UTF-8');",mb_strlenでマルチバイト対応,mb_strlen()関数を使ってマルチバイト文字（日本語など）の文字数を正確にカウントする方法です。UTF-8エンコーディングを指定します。
,PHP,最大値を見つけよ,整数の配列から最大値を返す関数 `getMax` を作成してください。,<?php\nfunction getMax($arr) {\n  // ここに書くコードを考えてください\n},$max = $arr[0];\nforeach ($arr as $num) {\n  if ($num > $max) {\n    $max = $num;\n  }\n}\nreturn $max;,foreach文で最大値更新,配列の最初の数字を最大値として覚えておき、それ以降の数字と1つずつ比較していく方法です。より大きい数字が見つかったら、それを新しい最大値として覚えます。,return max($arr);,max関数使用,PHPの組み込み関数max()を使って配列の中から一番大きい数字を直接見つける方法です。最も簡単で効率的な方法です。,"return array_reduce($arr, function($carry, $item) {\n  return $item > $carry ? $item : $carry;\n}, $arr[0]);",array_reduceで比較,array_reduce()関数を使って配列の要素を順番に比較し、最大値を見つける方法です。関数型プログラミングのアプローチです。
,PHP,配列をソートせよ,整数配列を小さい順に並び替える関数 `sortArray` を作成してください。隣り合う2つの数を比較して、大きい方を右に移動させる方法を使ってください。,<?php\nfunction sortArray($arr) {\n  // ここに書くコードを考えてください\n},$result = $arr;\n$length = count($result);\nfor ($i = 0; $i < $length - 1; $i++) {\n  for ($j = 0; $j < $length - $i - 1; $j++) {\n    if ($result[$j] > $result[$j + 1]) {\n      $temp = $result[$j];\n      $result[$j] = $result[$j + 1];\n      $result[$j + 1] = $temp;\n    }\n  }\n}\nreturn $result;,隣り合う数を比較して交換,"隣り合う2つの数字を比較して、左の数字が右の数字より大きい場合は入れ替える方法です。これを繰り返すことで、最終的に小さい順に並びます。例えば[3, 1, 4, 2]という配列なら、[1, 2, 3, 4]になります。",sort($arr);\nreturn $arr;,sort関数使用,PHPの組み込み関数sort()を使って配列を並び替える方法です。数字を小さい順に並べるための簡単な方法ですが、配列の中身が変わってしまうことに注意が必要です。,$result = $arr;\nasort($result);\nreturn array_values($result);,asortで連想配列対応,asort()関数を使って配列を並び替え、array_values()でインデックスを振り直す方法です。元の配列のキーを保持しながらソートできます。
,PHP,配列から要素を探す,配列から特定の値を探し、その位置を返す関数 `findElement` を作成してください。見つからない場合は-1を返してください。,"<?php\nfunction findElement($arr, $target) {\n  // ここに書くコードを考えてください\n}",foreach ($arr as $index => $value) {\n  if ($value === $target) {\n    return $index;\n  }\n}\nreturn -1;,foreach文で順番に確認,配列の要素を1つずつ順番に確認し、探している値と一致する要素を見つけたらその位置を返す方法です。見つからない場合は-1を返します。,"$index = array_search($target, $arr);\nreturn $index !== false ? $index : -1;",array_search関数使用,PHPの組み込み関数array_search()を使って配列から値を探す方法です。見つからない場合はfalseを返すので、-1に変換します。,"return in_array($target, $arr) ? array_keys($arr, $target)[0] : -1;",in_arrayとarray_keysを組み合わせ,in_array()で値の存在を確認し、array_keys()でその値のキーを取得する方法です。最初に見つかった要素の位置を返します。
,PHP,文字列の前後一致判定,与えられた文字列が前から読んでも後ろから読んでも同じになるかどうかを判定する関数 `isPalindrome` を作成してください。,<?php\nfunction isPalindrome($str) {\n  // ここに書くコードを考えてください\n},$left = 0;\n$right = strlen($str) - 1;\nwhile ($left < $right) {\n  if ($str[$left] !== $str[$right]) return false;\n  $left++;\n  $right--;\n}\nreturn true;,両端から1文字ずつ比較,文字列の最初と最後の文字から順番に比較していく方法です。例えば「しんぶんし」という文字列なら、「し」と「し」、「ん」と「ん」、「ぶ」と「ぶ」を比較します。,return $str === strrev($str);,strrevで文字列を反転,strrev()関数で文字列を逆順にしてから比較する方法です。例えば「しんぶんし」という文字列なら、逆順にしても「しんぶんし」になるので、回文だと分かります。,"$cleanStr = preg_replace('/[^a-zA-Z0-9]/', '', strtolower($str));\nreturn $cleanStr === strrev($cleanStr);",記号を除いて比較,"toLowerCase()メソッドで文字列を小文字に変換し、replace()メソッドで記号を除いてから回文かどうかを判定する方法です。例えば「A man, a plan, a canal: Panama」という文字列なら、記号を除いて「amanaplanacanalpanama」となり、回文だと分かります。"
,PHP,配列の重複を削除,配列から重複する要素を削除する関数 `removeDuplicates` を作成してください。,<?php\nfunction removeDuplicates($arr) {\n  // ここに書くコードを考えてください\n},"$result = [];\nforeach ($arr as $item) {\n  if (!in_array($item, $result)) {\n    $result[] = $item;\n  }\n}\nreturn $result;",foreach文で重複チェック,"配列の要素を1つずつ確認し、新しい配列にまだ入っていない要素だけを追加していく方法です。例えば[1, 2, 2, 3, 3, 3]という配列なら、[1, 2, 3]という配列ができます。",return array_unique($arr);,array_unique関数使用,PHPの組み込み関数array_unique()を使って重複する要素を自動的に取り除く方法です。最も簡単で効率的な方法です。,return array_values(array_unique($arr));,インデックスを振り直し,array_unique()で重複を除去し、array_values()でインデックスを振り直す方法です。連続したインデックスを持つ配列が得られます。
,PHP,ファイルの読み込み,指定されたファイルの内容を読み込んで返す関数 `readFile` を作成してください。ファイルが存在しない場合はnullを返してください。,<?php\nfunction readFile($filename) {\n  // ここに書くコードを考えてください\n},if (!file_exists($filename)) {\n  return null;\n}\nreturn file_get_contents($filename);,file_existsで存在確認,file_exists()関数でファイルの存在を確認し、存在する場合はfile_get_contents()でファイルの内容を読み込む方法です。最も基本的なファイル読み込みのパターンです。,try {\n  return file_get_contents($filename);\n} catch (Exception $e) {\n  return null;\n},例外処理でエラーハンドリング,try-catch文を使って例外処理でエラーハンドリングを行う方法です。ファイルが存在しない場合や読み込みエラーの場合にnullを返します。,if (!is_readable($filename)) {\n  return null;\n}\n$content = file_get_contents($filename);\nreturn $content !== false ? $content : null;,is_readableで読み込み可能確認,is_readable()関数でファイルが読み込み可能かどうかを確認し、file_get_contents()の戻り値もチェックする方法です。より厳密なエラーハンドリングができます。
,PHP,CSVファイルの処理,CSVファイルを読み込んで配列に変換する関数 `parseCSV` を作成してください。,<?php\nfunction parseCSV($filename) {\n  // ここに書くコードを考えてください\n},"$result = [];\nif (($handle = fopen($filename, 'r')) !== false) {\n  while (($data = fgetcsv($handle)) !== false) {\n    $result[] = $data;\n  }\n  fclose($handle);\n}\nreturn $result;",fopenとfgetcsvで行ごとに処理,fopen()でファイルを開き、fgetcsv()で行ごとにCSVデータを読み込む方法です。各行を配列として結果配列に追加していきます。,"return array_map('str_getcsv', file($filename));",fileとstr_getcsvで一括処理,file()関数でファイル全体を配列として読み込み、array_map()とstr_getcsv()で各行をCSVとして解析する方法です。短いコードで書けます。,"if (!file_exists($filename)) {\n  return [];\n}\n$content = file_get_contents($filename);\n$lines = explode(""\n"", trim($content));\n$result = [];\nforeach ($lines as $line) {\n  if (!empty($line)) {\n    $result[] = str_getcsv($line);\n  }\n}\nreturn $result;",手動でCSV解析,file_get_contents()でファイル全体を読み込み、explode()で行に分割し、str_getcsv()で各行をCSVとして解析する方法です。空行の処理も含まれています。
,PHP,JSONデータの処理,JSON文字列を配列に変換し、配列をJSON文字列に変換する関数を作成してください。,<?php\nfunction parseJSON($jsonString) {\n  // ここに書くコードを考えてください\n}\n\nfunction toJSON($data) {\n  // ここに書くコードを考えてください\n},"function parseJSON($jsonString) {\n  return json_decode($jsonString, true);\n}\n\nfunction toJSON($data) {\n  return json_encode($data);\n}",json_decodeとjson_encode使用,json_decode()関数でJSON文字列を配列に変換し、json_encode()関数で配列をJSON文字列に変換する方法です。最も基本的なJSON処理のパターンです。,"function parseJSON($jsonString) {\n  $result = json_decode($jsonString, true);\n  if (json_last_error() !== JSON_ERROR_NONE) {\n    return null;\n  }\n  return $result;\n}\n\nfunction toJSON($data) {\n  $result = json_encode($data);\n  if (json_last_error() !== JSON_ERROR_NONE) {\n    return null;\n  }\n  return $result;\n}",エラーハンドリング付き,json_last_error()関数を使ってJSON処理のエラーをチェックし、エラーが発生した場合はnullを返す方法です。より安全なJSON処理ができます。,"function parseJSON($jsonString) {\n  try {\n    return json_decode($jsonString, true, 512, JSON_THROW_ON_ERROR);\n  } catch (JsonException $e) {\n    return null;\n  }\n}\n\nfunction toJSON($data) {\n  try {\n    return json_encode($data, JSON_THROW_ON_ERROR);\n  } catch (JsonException $e) {\n    return null;\n  }\n}",例外処理でエラーハンドリング,JSON_THROW_ON_ERRORフラグを使って例外を発生させ、try-catch文でエラーハンドリングを行う方法です。PHP 7.3以降で使用できます。
,PHP,正規表現による文字列置換,正規表現を使って文字列内の特定のパターンを置換する関数 `replacePattern` を作成してください。,"<?php\nfunction replacePattern($string, $pattern, $replacement) {\n  // ここに書くコードを考えてください\n}","return preg_replace($pattern, $replacement, $string);",preg_replace関数使用,PHPの組み込み関数preg_replace()を使って正規表現による文字列置換を行う方法です。最も基本的な正規表現置換のパターンです。,"if (preg_match($pattern, $string)) {\n  return preg_replace($pattern, $replacement, $string);\n}\nreturn $string;",パターンマッチ確認後置換,preg_match()でパターンが存在するかどうかを確認してから置換を行う方法です。不要な置換処理を避けることができます。,"return preg_replace_callback($pattern, function($matches) use ($replacement) {\n  return $replacement;\n}, $string);",コールバック関数で置換,preg_replace_callback()を使ってコールバック関数で置換処理を行う方法です。より複雑な置換ロジックを実装できます。
,PHP,日付のフォーマット,日付文字列を指定された形式に変換する関数 `formatDate` を作成してください。,"<?php\nfunction formatDate($dateString, $format = 'Y-m-d') {\n  // ここに書くコードを考えてください\n}",$date = new DateTime($dateString);\nreturn $date->format($format);,DateTimeクラス使用,DateTimeクラスを使って日付文字列を解析し、format()メソッドで指定された形式に変換する方法です。最も基本的な日付フォーマットのパターンです。,try {\n  $date = new DateTime($dateString);\n  return $date->format($format);\n} catch (Exception $e) {\n  return null;\n},例外処理付き,try-catch文を使って日付解析のエラーをハンドリングする方法です。無効な日付文字列が渡された場合にnullを返します。,"if (strtotime($dateString) === false) {\n  return null;\n}\nreturn date($format, strtotime($dateString));",strtotimeとdate関数使用,strtotime()関数で日付文字列をタイムスタンプに変換し、date()関数で指定された形式にフォーマットする方法です。より古いPHPでも使用できます。
,PHP,ディレクトリの内容取得,指定されたディレクトリ内のファイルとフォルダの一覧を取得する関数 `getDirectoryContents` を作成してください。,<?php\nfunction getDirectoryContents($directory) {\n  // ここに書くコードを考えてください\n},$contents = [];\nif (is_dir($directory)) {\n  $files = scandir($directory);\n  foreach ($files as $file) {\n    if ($file !== '.' && $file !== '..') {\n      $contents[] = $file;\n    }\n  }\n}\nreturn $contents;,scandir関数使用,is_dir()でディレクトリかどうかを確認し、scandir()でディレクトリの内容を取得する方法です。'.'と'..'は除外します。,if (!is_dir($directory)) {\n  return [];\n}\n$contents = [];\n$iterator = new DirectoryIterator($directory);\nforeach ($iterator as $file) {\n  if (!$file->isDot()) {\n    $contents[] = $file->getFilename();\n  }\n}\nreturn $contents;,DirectoryIteratorクラス使用,DirectoryIteratorクラスを使ってディレクトリの内容を取得する方法です。オブジェクト指向的なアプローチで、より詳細な情報も取得できます。,if (!is_readable($directory)) {\n  return [];\n}\n$contents = [];\n$handle = opendir($directory);\nwhile (($file = readdir($handle)) !== false) {\n  if ($file !== '.' && $file !== '..') {\n    $contents[] = $file;\n  }\n}\nclosedir($handle);\nreturn $contents;,opendirとreaddir関数使用,opendir()、readdir()、closedir()関数を使ってディレクトリの内容を取得する方法です。より低レベルなアプローチですが、メモリ効率が良い場合があります。
