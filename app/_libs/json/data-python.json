[
    {
        "contentId": "",
        "language": "Python",
        "title": "文字列を逆にせよ",
        "description": "与えられた文字列を逆順にして返す関数 `reverse_string` を作成してください。",
        "templateCode": "def reverse_string(s):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "result = ''\nfor i in range(len(s) - 1, -1, -1):\n    result += s[i]\nreturn result",
        "answer01_hint": "末尾から1文字ずつ結合",
        "answer01_desc": "文字列の最後の文字から順番に、新しい文字列に1文字ずつ追加していく方法です。例えば「こんにちは」という文字列なら、「は」「ち」「に」「ん」「こ」の順に結合していきます。",
        "answer02_code": "return s[::-1]",
        "answer02_hint": "スライス記法で一括変換",
        "answer02_desc": "Pythonのスライス記法[::-1]を使って文字列を逆順にする方法です。最も簡潔で効率的な方法です。",
        "answer03_code": "return ''.join(reversed(s))",
        "answer03_hint": "reversed関数とjoin使用",
        "answer03_desc": "reversed()関数で文字列を逆順のイテレータにし、join()で文字列に戻す方法です。メモリ効率が良い方法です。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "リストの合計を求めよ",
        "description": "整数のリストを受け取り、その合計を返す関数 `sum_list` を作成してください。",
        "templateCode": "def sum_list(lst):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "total = 0\nfor num in lst:\n    total += num\nreturn total",
        "answer01_hint": "for文で順次加算",
        "answer01_desc": "リストの数字を1つずつ順番に足し合わせていく方法です。例えば[1, 2, 3]というリストなら、0から始めて1を足し、2を足し、3を足して、最終的に6になります。",
        "answer02_code": "return sum(lst)",
        "answer02_hint": "sum関数使用",
        "answer02_desc": "Pythonの組み込み関数sum()を使ってリストの合計を直接計算する方法です。最も簡単で効率的な方法です。",
        "answer03_code": "return reduce(lambda x, y: x + y, lst, 0)",
        "answer03_hint": "reduceで集計",
        "answer03_desc": "functools.reduce()を使ってリストの数字をまとめて足し合わせる方法です。最初に0を設定し、そこにリストの数字を1つずつ足していきます。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "偶数のみ抽出",
        "description": "整数リストから偶数だけを抽出して返す関数 `filter_even` を作成してください。",
        "templateCode": "def filter_even(lst):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "result = []\nfor num in lst:\n    if num % 2 == 0:\n        result.append(num)\nreturn result",
        "answer01_hint": "for文で条件分岐",
        "answer01_desc": "リストの数字を1つずつ確認し、2で割り切れる数（偶数）だけを新しいリストに追加していく方法です。例えば[1, 2, 3, 4]というリストなら、[2, 4]というリストができます。",
        "answer02_code": "return [x for x in lst if x % 2 == 0]",
        "answer02_hint": "リスト内包表記で条件抽出",
        "answer02_desc": "リスト内包表記を使ってリストから条件に合う数字だけを選び出す方法です。2で割り切れる数だけを選び出して新しいリストを作ります。",
        "answer03_code": "return list(filter(lambda x: x % 2 == 0, lst))",
        "answer03_hint": "filter関数使用",
        "answer03_desc": "filter()関数とlambda式を使ってリストから偶数だけを選び出す方法です。関数型プログラミングのアプローチです。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "最大値を求めよ",
        "description": "整数リストから最大値を返す関数 `find_max` を作成してください。",
        "templateCode": "def find_max(lst):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "if not lst:\n    return None\nmax_val = lst[0]\nfor num in lst[1:]:\n    if num > max_val:\n        max_val = num\nreturn max_val",
        "answer01_hint": "for文で順次比較",
        "answer01_desc": "リストの最初の要素を最大値として設定し、残りの要素を1つずつ比較して最大値を更新していく方法です。空のリストの場合はNoneを返します。",
        "answer02_code": "return max(lst) if lst else None",
        "answer02_hint": "max関数使用",
        "answer02_desc": "Pythonの組み込み関数max()を使ってリストの最大値を直接取得する方法です。最も簡単で効率的な方法です。",
        "answer03_code": "return reduce(lambda x, y: x if x > y else y, lst) if lst else None",
        "answer03_hint": "reduceで比較",
        "answer03_desc": "functools.reduce()を使ってリストの要素を順次比較し、最大値を求める方法です。関数型プログラミングのアプローチです。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "文字列の長さを求めよ",
        "description": "文字列の長さを返す関数 `string_length` を作成してください。",
        "templateCode": "def string_length(s):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "count = 0\nfor char in s:\n    count += 1\nreturn count",
        "answer01_hint": "for文で文字数カウント",
        "answer01_desc": "文字列の文字を1つずつ数えていく方法です。文字列の各文字を順番に確認して、カウンターを1ずつ増やしていきます。",
        "answer02_code": "return len(s)",
        "answer02_hint": "len関数使用",
        "answer02_desc": "Pythonの組み込み関数len()を使って文字列の長さを直接取得する方法です。最も簡単で効率的な方法です。",
        "answer03_code": "return sum(1 for _ in s)",
        "answer03_hint": "sumとジェネレータ式使用",
        "answer03_desc": "ジェネレータ式とsum()を組み合わせて文字数をカウントする方法です。メモリ効率が良い方法です。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "リストをソートせよ",
        "description": "整数リストを昇順にソートして返す関数 `sort_list` を作成してください。",
        "templateCode": "def sort_list(lst):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "result = lst.copy()\nfor i in range(len(result)):\n    for j in range(i + 1, len(result)):\n        if result[i] > result[j]:\n            result[i], result[j] = result[j], result[i]\nreturn result",
        "answer01_hint": "バブルソート実装",
        "answer01_desc": "バブルソートアルゴリズムを実装する方法です。隣り合う要素を比較して、大きい方を後ろに移動させることを繰り返します。",
        "answer02_code": "return sorted(lst)",
        "answer02_hint": "sorted関数使用",
        "answer02_desc": "Pythonの組み込み関数sorted()を使ってリストをソートする方法です。最も簡単で効率的な方法です。",
        "answer03_code": "result = lst.copy()\nresult.sort()\nreturn result",
        "answer03_hint": "sortメソッド使用",
        "answer03_desc": "リストのsort()メソッドを使ってソートする方法です。元のリストを変更せずに、コピーを作成してからソートします。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "文字列の出現回数を数えよ",
        "description": "文字列内で指定された文字の出現回数を返す関数 `count_char` を作成してください。",
        "templateCode": "def count_char(s, char):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "count = 0\nfor c in s:\n    if c == char:\n        count += 1\nreturn count",
        "answer01_hint": "for文で文字比較",
        "answer01_desc": "文字列の各文字を1つずつ確認し、指定された文字と一致する回数をカウントする方法です。",
        "answer02_code": "return s.count(char)",
        "answer02_hint": "countメソッド使用",
        "answer02_desc": "文字列のcount()メソッドを使って指定された文字の出現回数を直接取得する方法です。最も簡単で効率的な方法です。",
        "answer03_code": "return sum(1 for c in s if c == char)",
        "answer03_hint": "sumとジェネレータ式使用",
        "answer03_desc": "ジェネレータ式とsum()を組み合わせて文字の出現回数をカウントする方法です。条件に合う文字だけをカウントします。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "リストの重複を除去せよ",
        "description": "リストから重複する要素を除去して返す関数 `remove_duplicates` を作成してください。",
        "templateCode": "def remove_duplicates(lst):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "result = []\nfor item in lst:\n    if item not in result:\n        result.append(item)\nreturn result",
        "answer01_hint": "for文で重複チェック",
        "answer01_desc": "リストの各要素を1つずつ確認し、結果リストに存在しない要素だけを追加していく方法です。",
        "answer02_code": "return list(set(lst))",
        "answer02_hint": "set関数使用",
        "answer02_desc": "set()を使って重複を除去し、list()でリストに戻す方法です。最も簡単で効率的な方法ですが、順序が保持されません。",
        "answer03_code": "return list(dict.fromkeys(lst))",
        "answer03_hint": "dict.fromkeys使用",
        "answer03_desc": "dict.fromkeys()を使って重複を除去し、順序を保持する方法です。Python 3.7以降で順序が保持されます。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "文字列が回文か判定せよ",
        "description": "文字列が回文（前から読んでも後ろから読んでも同じ）かどうかを判定する関数 `is_palindrome` を作成してください。",
        "templateCode": "def is_palindrome(s):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "left = 0\nright = len(s) - 1\nwhile left < right:\n    if s[left] != s[right]:\n        return False\n    left += 1\n    right -= 1\nreturn True",
        "answer01_hint": "両端から比較",
        "answer01_desc": "文字列の両端から中央に向かって文字を比較していく方法です。異なる文字が見つかった時点でFalseを返します。",
        "answer02_code": "return s == s[::-1]",
        "answer02_hint": "スライスで逆順比較",
        "answer02_desc": "文字列を逆順にして元の文字列と比較する方法です。最も簡潔で分かりやすい方法です。",
        "answer03_code": "return all(s[i] == s[~i] for i in range(len(s) // 2))",
        "answer03_hint": "all関数とビット演算使用",
        "answer03_desc": "all()関数とビット演算（~i）を使って効率的に比較する方法です。メモリ効率が良い方法です。"
    },
    {
        "contentId": "",
        "language": "Python",
        "title": "フィボナッチ数列を生成せよ",
        "description": "指定された個数までのフィボナッチ数列を返す関数 `fibonacci` を作成してください。",
        "templateCode": "def fibonacci(n):\n    # ここに書くコードを考えてください\n    pass",
        "answer01_code": "if n <= 0:\n    return []\nelif n == 1:\n    return [0]\nelif n == 2:\n    return [0, 1]\nelse:\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib",
        "answer01_hint": "for文で順次計算",
        "answer01_desc": "フィボナッチ数列を順番に計算していく方法です。最初の2つの数（0, 1）から始めて、前の2つの数の和を次の数として追加していきます。",
        "answer02_code": "if n <= 0:\n    return []\na, b = 0, 1\nresult = []\nfor _ in range(n):\n    result.append(a)\n    a, b = b, a + b\nreturn result",
        "answer02_hint": "変数スワップ使用",
        "answer02_desc": "2つの変数を使ってフィボナッチ数列を計算する方法です。メモリ効率が良く、理解しやすい方法です。",
        "answer03_code": "def fib_gen():\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\nreturn list(next(fib_gen()) for _ in range(n)) if n > 0 else []",
        "answer03_hint": "ジェネレータ使用",
        "answer03_desc": "ジェネレータ関数を使ってフィボナッチ数列を生成する方法です。メモリ効率が非常に良い方法です。"
    }
]
